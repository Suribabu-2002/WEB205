import React, { useEffect, useState, useMemo } from 'react';
import { columns } from './activityLogColumns';
import {
  useReactTable,
  getCoreRowModel as tanstackGetCoreRowModel,
  flexRender,
} from '@tanstack/react-table';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/table';
import Pagination from '@/components/pagination';
import useGet from '@/hooks/useGet';
import { useAppStore } from '@/store/useAppStore';
import { useUser } from '@auth0/nextjs-auth0/client';
import { API_URLS } from '@/constants/apiUrls';
import { ActivityLogData, AssociateHeaderData } from '@/interfaces/Telephony';

function ActivityLog({ sortType }: any) {
  const [pageIndex, setPageIndex] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 10;
  const [totalEntries, setTotalEntries] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const { orgId } = useAppStore();
  const { user } = useUser();
  const userId = getUserIdFromSub(user?.sub ?? '');
  const [callData, setcallData] = useState<AssociateHeaderData>();
  const [activityLog, setActivityLog] = useState<ActivityLogData[]>([]);

  const keys: any = {
    completedCalls: 'Completed',
    inProgressCalls: 'In Processing',
    inboundCall: 'Inbound',
    outboundCall: 'Outbound',
    handlingTime: 'Handling Time',
    averageHandlingTime: 'AHT.',
    totalDuration: 'Total Duration',
  };

  const { data: headerData } = useGet<any, Error>(
    orgId !== null && orgId !== -1
      ? API_URLS.GET_ASSOCIATE_HEADER_DATA(orgId, Number(userId))
      : '',
    '',
    {
      queryKey: [API_URLS.GET_ASSOCIATE_HEADER_DATA(orgId, Number(userId))],
    }
  );

  useEffect(() => {
    if (headerData) {
      setcallData(headerData.response);
    }
  }, [headerData]);

  const { data: activityLogData, refetch } = useGet<any, Error>(
    orgId !== null && orgId !== -1
      ? API_URLS.GET_ASSOCIATE_ACTIVITY_DATA(
          orgId,
          Number(userId),
          pageSize,
          currentPage,
          sortType
        )
      : '',
    '',
    {
      queryKey: [
        API_URLS.GET_ASSOCIATE_ACTIVITY_DATA(
          orgId,
          Number(userId),
          pageSize,
          currentPage,
          sortType
        ),
      ],
    }
  );

  useEffect(() => {
    if (activityLogData) {
      setTotalEntries(activityLogData.response?.totalAssociate);
      setActivityLog(activityLogData.response?.associates);
    }
  }, [activityLogData]);

  useEffect(() => {
    refetch();
  }, [pageSize, currentPage, sortType]);

  const tableData = useMemo(() => {
    return activityLog ?? [];
  }, [activityLog]);

  const table = useReactTable({
    data: tableData,
    columns: columns,
    getCoreRowModel: getCoreRowModel(),
  });
  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
      setPageIndex(pageIndex - 1);
    }
  };

  const handleNextPage = () => {
    if (currentPage < Math.ceil(totalEntries / pageSize)) {
      setCurrentPage(currentPage + 1);
      setPageIndex(pageIndex + 1);
    }
  };

  const handlePageClick = (pageNumber: number) => {
    setCurrentPage(pageNumber);
    setPageIndex(pageNumber - 1);
  };

  const totalPages = Math.ceil(totalEntries / pageSize);
  const pageNumbers = Array.from({ length: totalPages }, (_, i) => i + 1);

  return (
    <div className="flex flex-col">
      {callData && (
        <div className=" flex w-full flex-wrap p-5 pt-2.5 bg-white rounded-t-[10px]">
          <div className="flex flex-row border-[#ddd] border-r-2 pr-2.5">
            <div className="flex flex-col gap-1.5  bg-white px-4 ">
              <span className="text-3xl text-center ">
                {callData.totalDeals}
              </span>
              <span className=" font-medium text-sm text-[#444] ">
                Total Leads
              </span>
            </div>
            <div className="flex flex-col gap-1.5 bg-white px-4 ">
              <span className="text-3xl text-center">
                {callData.totalDialed}
              </span>
              <span className=" font-medium text-sm text-[#444] ">
                Total Dialed
              </span>
            </div>
          </div>
          <div
            className={`grid grid-cols-4 flex-grow bg-white border-[#ddd] border-r-2`}>
            {(Object.keys(callData) as Array<keyof typeof callData>)
              .slice(2, 6)
              .map((task) => (
                <div
                  key={String(task)}
                  className="flex flex-col px-2 justify-center items-center gap-1.5 text-3xl ">
                  <span
                    className={
                      String(task) === 'completedCalls' ||
                      String(task) === 'inboundCall'
                        ? 'text-[#57B280]'
                        : 'text-[#E84C4C]'
                    }>
                    {callData[task]}
                  </span>
                  <span className="capitalize text-[#666] text-sm font-bold">
                    {keys[task]}
                  </span>
                </div>
              ))}
          </div>
          <div
            className={`grid grid-cols-3 flex-grow place-content-center bg-white rounded-lg`}>
            {(Object.keys(callData) as Array<keyof typeof callData>)
              .slice(6)
              .map((duration) => (
                <div key={String(duration)} className="flex justify-center">
                  <div className="flex flex-col px-2 gap-1.5 justify-start items-start  text-2xl ">
                    <span className="text-[#999]">{callData[duration]}</span>
                    <span className="capitalize text-[#666] text-sm font-bold">
                      {keys[duration]}
                    </span>
                  </div>
                </div>
              ))}
          </div>
        </div>
      )}

      {/* table */}

      <div className="bg-white rounded-lg shadow-custom-blue">
        <div className="flex ">
          <div className="overflow-x-auto shadow-custom-blue border-b-[1px] border-t-[#ddd] min-w-[400px] rounded-bl-[10px] h-fit">
            <Table>
              <TableHeader className="h-10">
                {table.getHeaderGroups().map((headerGroup) => {
                  return (
                    <TableRow key={headerGroup.id}>
                      {headerGroup.headers.slice(0, 2).map((header) => (
                        <TableHead key={header.id}>
                          {header.isPlaceholder
                            ? null
                            : flexRender(
                                header.column.columnDef.header,
                                header.getContext()
                              )}
                        </TableHead>
                      ))}
                    </TableRow>
                  );
                })}
              </TableHeader>

              {table && table.getRowModel().rows.length > 0 ? (
                <TableBody className="text-sm text-[#444]">
                  {table?.getRowModel()?.rows.map((row) => (
                    <TableRow key={row.id}>
                      {row
                        .getVisibleCells()
                        .slice(0, 2)
                        .map((cell) => {
                          return (
                            <TableCell className={`px-2.5 py-1 `} key={cell.id}>
                              {flexRender(
                                cell.column.columnDef.cell,
                                cell.getContext()
                              )}{' '}
                            </TableCell>
                          );
                        })}
                    </TableRow>
                  ))}
                </TableBody>
              ) : (
                <TableBody>
                  <TableRow>
                    <TableCell className="text-center" colSpan={columns.length}>
                      No data found
                    </TableCell>
                  </TableRow>
                </TableBody>
              )}
            </Table>
          </div>

          {/*scrollable part*/}
          <div
            className="border-r-[1px] flex flex-row rounded-r-xl table-custom-scrollbar shadow-custom-blue border-b-[1px] truncate overflow-x-scroll w-[600px] h-fit relative"
            style={{
              maxWidth: 'calc(100% - 400px)',
              width: '100%',
            }}>
            <div className="absolute z-[40] opacity-30 left-0 h-full w-12 bg-gradient-to-r from-[#bbb] to-white"></div>
            <div className="absolute z-[40] rounded-r-xl opacity-30 right-0 h-full w-12 bg-gradient-to-l from-[#bbb] to-white"></div>
            <Table>
              <TableHeader className="h-10 text-sm ">
                {table?.getHeaderGroups().map((headerGroup) => (
                  <TableRow key={headerGroup.id}>
                    {headerGroup.headers.slice(2).map((header) => (
                      <TableHead key={header.id}>
                        {header.isPlaceholder
                          ? null
                          : flexRender(
                              header.column.columnDef.header,
                              header.getContext()
                            )}
                      </TableHead>
                    ))}
                  </TableRow>
                ))}
              </TableHeader>
              {table && table.getRowModel().rows.length > 0 ? (
                <TableBody className="h-full">
                  {table?.getRowModel().rows.map((row) => (
                    <TableRow key={row.id}>
                      {row
                        .getVisibleCells()
                        .slice(2)
                        .map((cell) => {
                          return (
                            <TableCell className={`px-2.5 py-1`} key={cell.id}>
                              {flexRender(
                                cell.column.columnDef.cell,
                                cell.getContext()
                              )}{' '}
                            </TableCell>
                          );
                        })}
                    </TableRow>
                  ))}
                </TableBody>
              ) : (
                <TableBody>
                  <TableRow>
                    <TableCell className="text-center" colSpan={columns.length}>
                      No data found
                    </TableCell>
                  </TableRow>
                </TableBody>
              )}
            </Table>
          </div>
        </div>
        <div className="text-xs text-right mt-5 mr-5 text-999 pb-1 px-2">
          {`Showing ${
            currentPage === 1
              ? tableData?.length
              : (currentPage - 1) * pageSize + tableData?.length
          } - of ${totalEntries ?? 0} Tasks`}
        </div>
        <div className="flex justify-end mb-4 mx-8">
          <Pagination
            handlePrevPage={handlePrevPage}
            handleNextPage={handleNextPage}
            handlePageClick={handlePageClick}
            currentPage={currentPage}
            totalPages={totalPages}
            pageNumbers={pageNumbers}
            isLoading={isLoading}
          />
        </div>
      </div>
    </div>
  );
}

export default ActivityLog;

function getCoreRowModel() {
  return tanstackGetCoreRowModel();
}

const getUserIdFromSub = (sub: string) => {
  const parts = sub.split('|');
  return parts.length > 1 ? parts[1] : null;
};
